# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SKAISAFEWrapper
else:
    import _SKAISAFEWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SKAISAFEWrapper.delete_SwigPyIterator

    def value(self):
        return _SKAISAFEWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SKAISAFEWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SKAISAFEWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SKAISAFEWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SKAISAFEWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SKAISAFEWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _SKAISAFEWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _SKAISAFEWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _SKAISAFEWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SKAISAFEWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SKAISAFEWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SKAISAFEWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SKAISAFEWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SKAISAFEWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SKAISAFEWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SKAISAFEWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _SKAISAFEWrapper:
_SKAISAFEWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _SKAISAFEWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _SKAISAFEWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _SKAISAFEWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _SKAISAFEWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _SKAISAFEWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _SKAISAFEWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _SKAISAFEWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _SKAISAFEWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _SKAISAFESeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SKAISAFEWrapper.delete__SKAISAFESeq

# Register _SKAISAFESeq in _SKAISAFEWrapper:
_SKAISAFEWrapper._SKAISAFESeq_swigregister(_SKAISAFESeq)

class SKAISAFESeq(_SKAISAFESeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SKAISAFEWrapper.delete_SKAISAFESeq

    def __init__(self, *args):
        _SKAISAFEWrapper.SKAISAFESeq_swiginit(self, _SKAISAFEWrapper.new_SKAISAFESeq(*args))

    def __len__(self):
        return _SKAISAFEWrapper.SKAISAFESeq___len__(self)

    def __getitem__(self, i):
        return _SKAISAFEWrapper.SKAISAFESeq___getitem__(self, i)

# Register SKAISAFESeq in _SKAISAFEWrapper:
_SKAISAFEWrapper.SKAISAFESeq_swigregister(SKAISAFESeq)

class SKAISAFE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _SKAISAFEWrapper.delete_SKAISAFE

    def __init__(self, *args):
        _SKAISAFEWrapper.SKAISAFE_swiginit(self, _SKAISAFEWrapper.new_SKAISAFE(*args))

    def __eq__(self, x):
        return _SKAISAFEWrapper.SKAISAFE___eq__(self, x)

    def __ne__(self, x):
        return _SKAISAFEWrapper.SKAISAFE___ne__(self, x)

    def index(self, *args):
        return _SKAISAFEWrapper.SKAISAFE_index(self, *args)

    def message(self, *args):
        return _SKAISAFEWrapper.SKAISAFE_message(self, *args)

    def direccion(self, *args):
        return _SKAISAFEWrapper.SKAISAFE_direccion(self, *args)

    def velocidad(self, *args):
        return _SKAISAFEWrapper.SKAISAFE_velocidad(self, *args)

    def altura(self, *args):
        return _SKAISAFEWrapper.SKAISAFE_altura(self, *args)

# Register SKAISAFE in _SKAISAFEWrapper:
_SKAISAFEWrapper.SKAISAFE_swigregister(SKAISAFE)

GEN_API_VER = _SKAISAFEWrapper.GEN_API_VER
class SKAISAFEPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _SKAISAFEWrapper.SKAISAFEPubSubType_swiginit(self, _SKAISAFEWrapper.new_SKAISAFEPubSubType())
    __swig_destroy__ = _SKAISAFEWrapper.delete_SKAISAFEPubSubType

    def serialize(self, *args):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_serialize(self, *args)

    def deserialize(self, payload, data):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_deserialize(self, payload, data)

    def getSerializedSizeProvider(self, *args):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_getSerializedSizeProvider(self, *args)

    def getKey(self, data, ihandle, force_md5=False):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_getKey(self, data, ihandle, force_md5)

    def createData(self):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_createData(self)

    def deleteData(self, data):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_deleteData(self, data)

    def is_bounded(self):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_is_bounded(self)

    def is_plain(self, *args):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_is_plain(self, *args)

    def construct_sample(self, memory):
        return _SKAISAFEWrapper.SKAISAFEPubSubType_construct_sample(self, memory)
    m_md5 = property(_SKAISAFEWrapper.SKAISAFEPubSubType_m_md5_get, _SKAISAFEWrapper.SKAISAFEPubSubType_m_md5_set)
    m_keyBuffer = property(_SKAISAFEWrapper.SKAISAFEPubSubType_m_keyBuffer_get, _SKAISAFEWrapper.SKAISAFEPubSubType_m_keyBuffer_set)

# Register SKAISAFEPubSubType in _SKAISAFEWrapper:
_SKAISAFEWrapper.SKAISAFEPubSubType_swigregister(SKAISAFEPubSubType)




// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SKAISAFE.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SKAISAFE.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




SKAISAFE::SKAISAFE()
{
}

SKAISAFE::~SKAISAFE()
{
}

SKAISAFE::SKAISAFE(
        const SKAISAFE& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
    m_direccion = x.m_direccion;
    m_velocidad = x.m_velocidad;
    m_altura = x.m_altura;
}

SKAISAFE::SKAISAFE(
        SKAISAFE&& x) noexcept
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_direccion = x.m_direccion;
    m_velocidad = x.m_velocidad;
    m_altura = x.m_altura;
}

SKAISAFE& SKAISAFE::operator =(
        const SKAISAFE& x)
{

    m_index = x.m_index;
    m_message = x.m_message;
    m_direccion = x.m_direccion;
    m_velocidad = x.m_velocidad;
    m_altura = x.m_altura;
    return *this;
}

SKAISAFE& SKAISAFE::operator =(
        SKAISAFE&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_direccion = x.m_direccion;
    m_velocidad = x.m_velocidad;
    m_altura = x.m_altura;
    return *this;
}

bool SKAISAFE::operator ==(
        const SKAISAFE& x) const
{
    return (m_index == x.m_index &&
           m_message == x.m_message &&
           m_direccion == x.m_direccion &&
           m_velocidad == x.m_velocidad &&
           m_altura == x.m_altura);
}

bool SKAISAFE::operator !=(
        const SKAISAFE& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void SKAISAFE::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t SKAISAFE::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& SKAISAFE::index()
{
    return m_index;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void SKAISAFE::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void SKAISAFE::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& SKAISAFE::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& SKAISAFE::message()
{
    return m_message;
}


/*!
 * @brief This function sets a value in member direccion
 * @param _direccion New value for member direccion
 */
void SKAISAFE::direccion(
        int16_t _direccion)
{
    m_direccion = _direccion;
}

/*!
 * @brief This function returns the value of member direccion
 * @return Value of member direccion
 */
int16_t SKAISAFE::direccion() const
{
    return m_direccion;
}

/*!
 * @brief This function returns a reference to member direccion
 * @return Reference to member direccion
 */
int16_t& SKAISAFE::direccion()
{
    return m_direccion;
}


/*!
 * @brief This function sets a value in member velocidad
 * @param _velocidad New value for member velocidad
 */
void SKAISAFE::velocidad(
        int16_t _velocidad)
{
    m_velocidad = _velocidad;
}

/*!
 * @brief This function returns the value of member velocidad
 * @return Value of member velocidad
 */
int16_t SKAISAFE::velocidad() const
{
    return m_velocidad;
}

/*!
 * @brief This function returns a reference to member velocidad
 * @return Reference to member velocidad
 */
int16_t& SKAISAFE::velocidad()
{
    return m_velocidad;
}


/*!
 * @brief This function sets a value in member altura
 * @param _altura New value for member altura
 */
void SKAISAFE::altura(
        uint8_t _altura)
{
    m_altura = _altura;
}

/*!
 * @brief This function returns the value of member altura
 * @return Value of member altura
 */
uint8_t SKAISAFE::altura() const
{
    return m_altura;
}

/*!
 * @brief This function returns a reference to member altura
 * @return Reference to member altura
 */
uint8_t& SKAISAFE::altura()
{
    return m_altura;
}


// Include auxiliary functions like for serializing/deserializing.
#include "SKAISAFECdrAux.ipp"

